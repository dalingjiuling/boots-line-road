<?xml version="1.0" encoding="utf-8"?>
<template>
	<name>controller</name>
	<filePath>src/main/java/${packageName}/${moduleName}/web/${subModuleName}</filePath>
	<fileName>${ClassName}Controller.java</fileName>
	<content><![CDATA[<#ftl>
/**
 * Copyright &copy; 2013-2016 赵亮亮   All rights reserved.
 */
package ${packageName}.${moduleName}.web<#if subModuleName != "">.${subModuleName}</#if>;

import java.util.List;
import java.util.Map;

import javax.servlet.http.HttpServletResponse;

import org.apache.shiro.authz.annotation.RequiresPermissions;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.ModelAttribute;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.ResponseBody;

import cn.net.ecode.common.utils.IdGen;
import cn.net.ecode.common.config.Global;
import cn.net.ecode.common.utils.StringUtils;
import cn.net.ecode.common.web.BaseController;
import cn.net.ecode.common.persistence.TreeEntity;
import ${packageName}.${moduleName}.entity<#if subModuleName != "">.${subModuleName}</#if>.${ClassName};
import ${packageName}.${moduleName}.service<#if subModuleName != "">.${subModuleName}</#if>.${ClassName}Service;
import com.google.common.collect.Lists;
import com.google.common.collect.Maps;

/**
 * ${functionName}Controller
 * @author ${functionAuthor}
 * @version ${functionVersion}
 */
@Controller
@RequestMapping(value = "${r"${adminPath}"}/${urlPrefix}")
public class ${ClassName}Controller extends BaseController {

	@Autowired
	private ${ClassName}Service ${className}Service;
	
	/**
	 * 获取数据
	 */
	@ModelAttribute
	public ${ClassName} get(<#assign pkParam><#list table.pkList as pk>${pk.javaType} ${pk.simpleJavaField}, </#list></#assign>${pkParam?substring(0, pkParam?last_index_of(","))}, boolean isNewRecord) {
		<#if table.pkList?size lte 1>
		return ${className}Service.get(<#assign pkParam><#list table.pkList as pk>${pk.simpleJavaField}, </#list></#assign>${pkParam?substring(0, pkParam?last_index_of(","))}, isNewRecord);
		<#else>
		return ${className}Service.get(new Class<?>[]{<#assign pkParam><#list table.pkList as pk>${pk.javaType}.class, </#list></#assign>${pkParam?substring(0, pkParam?last_index_of(","))}},
				new Object[]{<#assign pkParam><#list table.pkList as pk>${pk.simpleJavaField}, </#list></#assign>${pkParam?substring(0, pkParam?last_index_of(","))}}, isNewRecord);
		</#if>
	}
	
	/**
	 * 查询列表
	 */
	@RequiresPermissions("${permissionPrefix}:view")
	@RequestMapping(value = {"list", ""})
	public String list(${ClassName} ${className}, Model model) {
		model.addAttribute("${className}", ${className});
		return "${lastPackageName}/${viewPrefix}List";
	}

	/**
	 * 查询列表数据
	 */
	@RequiresPermissions("${permissionPrefix}:view")
	@ResponseBody
	@RequestMapping(value = "listData")
	public List<${ClassName}> listData(${ClassName} ${className}) {
		<#if table.pkList?size lte 1>
		if (StringUtils.isBlank(${className}.getParentCode())) {
			${className}.setParentCode(${ClassName}.ROOT_CODE);
		}
		List<${ClassName}> list = null;
		if (StringUtils.isNotBlank(${className}.get${pkField?cap_first}())){
			list = Lists.newArrayList(get(${className}.get${pkField?cap_first}(), false));
		}else{
			list = ${className}Service.findList(${className});
		}
		return list;
		<#else>
		return null;
		</#if>
	}
	
	/**
	 * 查看编辑表单
	 */
	@RequiresPermissions("${permissionPrefix}:view")
	@RequestMapping(value = "form")
	public String form(${ClassName} ${className}, Model model) {
		if (${className}.getParent() != null && StringUtils.isNotBlank(${className}.getParent().get${pkField?cap_first}())) {
			${className}.setParent(${className}Service.get(${className}.getParent().get${pkField?cap_first}()));
		} else {
			${className}.setParentCode(TreeEntity.ROOT_CODE);
		}
		if (StringUtils.isBlank(${className}.get${pkField?cap_first}())) {
			<#list table.columnList as c><#if c.columnName == 'sorts'>
			${className}.setSorts(${className}Service.getMaxSort(${className}) + 30);
		</#if></#list>
			// int size=${className}Service.getMaxSize(${className}) ;
			// ${className}.set${pkField?cap_first}(${className}.getParent().get${pkField?cap_first}() + StringUtils.leftPad(String.valueOf(size > 0 ? size+1 : 1), 3, "0"));
			${className}.set${pkField?cap_first}(IdGen.nextId());	
			${className}.setIsNewRecord(true);
		}
		model.addAttribute("${className}", ${className});
		return "${lastPackageName}/${viewPrefix}Form";		
	}

	/**
	 * 保存数据
	 */
	@RequiresPermissions("${permissionPrefix}:edit")
	@ResponseBody
	@RequestMapping(value = "save")
	public String save(${ClassName} ${className}) {
		if(Global.isDemoMode()){
			return renderResult(Global.FALSE, "演示模式，不允许操作！");
		}
		StringBuilder builder = new StringBuilder();
		if (!beanValidator(builder, ${className})){
			return renderResult(Global.FALSE, builder.toString());
		}
		${className}Service.save(${className});
		return renderResult(Global.TRUE, "保存${functionNameSimple}成功");		
	}
	
	/**
	 * 删除数据
	 */
	@RequiresPermissions("${permissionPrefix}:edit")
	@ResponseBody
	@RequestMapping(value = "delete")
	public String delete(${ClassName} ${className}) {
		${className}Service.delete(${className});
		return renderResult(Global.TRUE, "删除${functionNameSimple}成功！");
	}
	
	/**
	 * 停用
	 */
	@RequiresPermissions("${permissionPrefix}:disable")
	@ResponseBody
	@RequestMapping(value = "disable")
	public String disable(${ClassName} ${className}) {
		if(Global.isDemoMode()){
			return renderResult(Global.FALSE, "演示模式，不允许操作！");
		}
		
		List<${ClassName}> ${className}List = ${className}Service.getEnabledList(${className});
		if(${className}List!=null&&${className}List.size()>0){
			return renderResult(Global.FALSE, "${functionNameSimple}包含未停用的，请先停用子节点！");
		}
		${className}Service.disable(${className});
		return renderResult(Global.TRUE, "停用${functionNameSimple}成功");
	}
	
	/**
	 * 按组停用
	 */
	@RequiresPermissions("${permissionPrefix}:disable")
	@ResponseBody
	@RequestMapping(value = "disableByGroup")
	public String disableByGroup(${ClassName} ${className}) {
		if(Global.isDemoMode()){
			return renderResult(Global.FALSE, "演示模式，不允许操作！");
		}
		${className}Service.disableByGroup(${className});
		return renderResult(Global.TRUE, "停用${functionNameSimple}及子成功");
	}
	
	/**
	 * 启用
	 */
	@RequiresPermissions("${permissionPrefix}:enable")
	@ResponseBody
	@RequestMapping(value = "enable")
	public String enable(${ClassName} ${className}) {
		if(Global.isDemoMode()){
			return renderResult(Global.FALSE, "演示模式，不允许操作！");
		}
		${className}Service.enable(${className});
		return renderResult(Global.TRUE, "启用${functionNameSimple}成功");
	}
	
	/**
	 * 按组启用
	 */
	@RequiresPermissions("${permissionPrefix}:enable")
	@ResponseBody
	@RequestMapping(value = "enableByGroup")
	public String enableByGroup(${ClassName} ${className}) {
		if(Global.isDemoMode()){
			return renderResult(Global.FALSE, "演示模式，不允许操作！");
		}
		${className}Service.enableByGroup(${className});
		return renderResult(Global.TRUE, "启用${functionNameSimple}及子成功");
	}

	/**
	 * 获取结构数据。
	 * @param extCode 排除的ID
	 */
	@RequiresPermissions("user")
	@ResponseBody
	@RequestMapping(value = "treeData")
	public List<Map<String, Object>> treeData(String extCode, HttpServletResponse response) {
		List<Map<String, Object>> mapList = Lists.newArrayList();
		List<${ClassName}> list = ${className}Service.findAllList(new ${ClassName}());
		for (int i=0; i<list.size(); i++){
			${ClassName} e = list.get(i);
			if ((StringUtils.isBlank(extCode) || (extCode!=null && !extCode.equals(e.get${pkField?cap_first}()) && e.getParentCodes().indexOf(","+extCode+",")==-1))
					&&(e.getStatus().equals("0"))){
				Map<String, Object> map = Maps.newHashMap();
				map.put("id", e.get${pkField?cap_first}());
				map.put("pId", e.getParentCode());
				map.put("pIds", e.getParentCodes());
				map.put("name", e.getName());
				mapList.add(map);
			}
		}
		return mapList;
	}
	
	/**
	 * 树结构数据修复
	 * @return
	 */
	@RequiresPermissions("${permissionPrefix}:edit")
	@ResponseBody
	@RequestMapping(value = "dataFix")
	public String dataFix(){
		${className}Service.updateFixParentCodes();
		return renderResult(Global.TRUE, "数据修复成功");
	}
	
}]]>
	</content>
</template>